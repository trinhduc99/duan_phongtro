!function (a) {
    var b = "dmUploader", c = {
        url: document.URL,
        method: "POST",
        extraData: {},
        maxFileSize: 0,
        maxFiles: 0,
        allowedTypes: "*",
        extFilter: null,
        dataType: null,
        fileName: "file",
        onInit: function () {
        },
        onFallbackMode: function (a) {
        },
        onNewFile: function (a, b) {
        },
        onBeforeUpload: function (a) {
        },
        onComplete: function () {
        },
        onUploadProgress: function (a, b) {
        },
        onUploadSuccess: function (a, b) {
        },
        onUploadError: function (a, b) {
        },
        onFileTypeError: function (a) {
        },
        onFileSizeError: function (a) {
        },
        onFileExtError: function (a) {
        },
        onFilesMaxError: function (a) {
        }
    }, d = function (b, d) {
        return this.element = a(b), this.settings = a.extend({}, c, d), !!this.checkBrowser() && (this.init(), !0)
    };
    d.prototype.checkBrowser = function () {
        return void 0 === window.FormData ? (this.settings.onFallbackMode.call(this.element, "Browser doesn't support Form API"), !1) : this.element.find("input[type=file]").length > 0 || (!(!this.checkEvent("drop", this.element) || !this.checkEvent("dragstart", this.element)) || (this.settings.onFallbackMode.call(this.element, "Browser doesn't support Ajax Drag and Drop"), !1))
    }, d.prototype.checkEvent = function (a, b) {
        var b = b || document.createElement("div"), a = "on" + a, c = a in b;
        return c || (b.setAttribute || (b = document.createElement("div")), b.setAttribute && b.removeAttribute && (b.setAttribute(a, ""), c = "function" == typeof b[a], void 0 !== b[a] && (b[a] = void 0), b.removeAttribute(a))), b = null, c
    }, d.prototype.init = function () {
        var b = this;
        b.queue = new Array, b.queuePos = -1, b.queueRunning = !1, b.element.on("drop", function (a) {
            a.preventDefault();
            var c = a.originalEvent.dataTransfer.files;
            b.queueFiles(c)
        }), b.element.find("input[type=file]").on("change", function (c) {
            var d = c.target.files;
            b.queueFiles(d), a(this).val("")
        }), this.settings.onInit.call(this.element)
    }, d.prototype.queueFiles = function (b) {
        for (var c = this.queue.length, d = 0; d < b.length; d++) {
            var e = b[d];
            if (this.settings.maxFileSize > 0 && e.size > this.settings.maxFileSize) this.settings.onFileSizeError.call(this.element, e); else if ("*" == this.settings.allowedTypes || e.type.match(this.settings.allowedTypes)) {
                if (null != this.settings.extFilter) {
                    var f = this.settings.extFilter.toLowerCase().split(";"), g = e.name.toLowerCase().split(".").pop();
                    if (a.inArray(g, f) < 0) {
                        this.settings.onFileExtError.call(this.element, e);
                        continue
                    }
                }
                if (this.settings.maxFiles > 0 && this.queue.length >= this.settings.maxFiles) this.settings.onFilesMaxError.call(this.element, e); else {
                    this.queue.push(e);
                    var h = this.queue.length - 1;
                    this.settings.onNewFile.call(this.element, h, e)
                }
            } else this.settings.onFileTypeError.call(this.element, e)
        }
        return !this.queueRunning && (this.queue.length != c && (this.processQueue(), !0))
    }, d.prototype.processQueue = function () {
        var b = this;
        if (++b.queuePos >= b.queue.length) return b.settings.onComplete.call(b.element), b.queuePos = b.queue.length - 1, void (b.queueRunning = !1);
        var c = b.queue[b.queuePos], d = new FormData;
        d.append(b.settings.fileName, c), !1 !== b.settings.onBeforeUpload.call(b.element, b.queuePos) && (a.each(b.settings.extraData, function (a, b) {
            d.append(a, b)
        }), b.queueRunning = !0, a.ajax({
            url: b.settings.url,
            type: b.settings.method,
            dataType: b.settings.dataType,
            data: d,
            cache: !1,
            contentType: !1,
            processData: !1,
            forceSync: !1,
            xhr: function () {
                var c = a.ajaxSettings.xhr();
                return c.upload && c.upload.addEventListener("progress", function (a) {
                    var c = 0, d = a.loaded || a.position, e = a.total || a.totalSize;
                    a.lengthComputable && (c = Math.ceil(d / e * 100)), b.settings.onUploadProgress.call(b.element, b.queuePos, c)
                }, !1), c
            },
            success: function (a, c, d) {
                b.settings.onUploadSuccess.call(b.element, b.queuePos, a)
            },
            error: function (a, c, d) {
                b.settings.onUploadError.call(b.element, b.queuePos, d)
            },
            complete: function (a, c) {
                b.processQueue()
            }
        }))
    }, a.fn.dmUploader = function (c) {
        return this.each(function () {
            a.data(this, b) || a.data(this, b, new d(this, c))
        })
    }, a(document).on("dragenter", function (a) {
        a.stopPropagation(), a.preventDefault()
    }), a(document).on("dragover", function (a) {
        a.stopPropagation(), a.preventDefault()
    }), a(document).on("drop", function (a) {
        a.stopPropagation(), a.preventDefault()
    })
}(jQuery);
